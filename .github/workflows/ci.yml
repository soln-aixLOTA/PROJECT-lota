name: CI

on:
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE.md'
  pull_request:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE.md'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  RUSTFLAGS: "-D warnings"
  CARGO_NET_RETRY: 3
  CARGO_INCREMENTAL: 0
  RUSTC_WRAPPER: sccache
  SCCACHE_GHA_ENABLED: "true"
  RUST_LOG: debug
  SCCACHE_CACHE_SIZE: "2G"
  SCCACHE_DIR: "/home/runner/.cache/sccache"
  CARGO_PROFILE_RELEASE_LTO: "true"
  CARGO_PROFILE_RELEASE_CODEGEN_UNITS: "1"
  CARGO_PROFILE_RELEASE_PANIC: "abort"

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Install sccache
        run: |
          mkdir -p /home/runner/.cache/sccache
          curl -L https://github.com/mozilla/sccache/releases/download/v0.3.3/sccache-v0.3.3-x86_64-unknown-linux-musl.tar.gz | tar xz
          sudo mv sccache-*/sccache /usr/local/bin/
          echo "RUSTC_WRAPPER=/usr/local/bin/sccache" >> $GITHUB_ENV
        timeout-minutes: 2

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt, clippy
          override: true

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            ~/.cache/sccache
          key: ${{ runner.os }}-cargo-lint-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-lint-

      - name: Check formatting
        run: cargo fmt --all -- --check
        timeout-minutes: 5

      - name: Run clippy with high optimization
        run: |
          cargo clippy --all-targets --all-features -- -D warnings \
            -W clippy::perf \
            -W clippy::complexity \
            -W clippy::style \
            -W clippy::correctness \
            -W clippy::suspicious \
            -W clippy::pedantic
        timeout-minutes: 5

  security-checks:
    name: Security Checks
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: Install security tools
        run: |
          cargo install cargo-audit
          cargo install cargo-deny
          cargo install cargo-outdated
        timeout-minutes: 10

      - name: Run security audit
        run: cargo audit
        timeout-minutes: 5

      - name: Check dependencies
        run: cargo deny check
        timeout-minutes: 5

      - name: Check for outdated dependencies
        run: cargo outdated --exit-code 1
        timeout-minutes: 5

      - name: Run SAST scan
        uses: github/codeql-action/analyze@v2
        with:
          languages: rust
          queries: security-and-quality

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [lint, security-checks]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install performance tools
        run: |
          cargo install cargo-criterion
          cargo install cargo-flamegraph
        timeout-minutes: 5

      - name: Run benchmarks
        run: |
          cargo criterion --output-format verbose
          cargo flamegraph --bin your-binary-name
        timeout-minutes: 15

      - name: Upload benchmark results
        uses: actions/upload-artifact@v2
        with:
          name: benchmark-results
          path: |
            target/criterion/**/*
            flamegraph.svg
          retention-days: 14

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [performance-test]
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: lotabots_test
          POSTGRES_INITDB_ARGS: "--nosync"
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --memory=2g
          --cpus=2
          --shm-size=2g
      redis:
        image: redis:6-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --memory=1g
          --cpus=1

    steps:
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential curl pkg-config libssl-dev redis-tools postgresql-client
          sudo sysctl -w vm.max_map_count=262144
          sudo sysctl -w net.core.somaxconn=65535
        timeout-minutes: 5

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-integration-${{ hashFiles('**/Cargo.lock') }}

      - name: Verify database connection
        run: |
          echo "Checking PostgreSQL connection..."
          timeout 30s bash -c 'until pg_isready -h localhost -p 5432; do sleep 1; done'
          echo "Checking Redis connection..."
          timeout 30s bash -c 'until redis-cli ping; do sleep 1; done'
        timeout-minutes: 1

      - name: Run integration tests
        run: |
          RUST_TEST_THREADS=4 cargo test --release --test '*' --all-features -- --nocapture --test-threads=4
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/lotabots_test
          REDIS_URL: redis://localhost:6379/0
          TEST_LOG: true
          RUST_BACKTRACE: full
          RUST_LOG: debug
        timeout-minutes: 20

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 30
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          buildkitd-flags: --debug

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/code-analyzer:latest
            ghcr.io/${{ github.repository }}/code-analyzer:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            RUST_VERSION=1.70
            CARGO_PROFILE_RELEASE_LTO=true
            CARGO_PROFILE_RELEASE_CODEGEN_UNITS=1
          provenance: true
          sbom: true

  notify:
    name: Notify Results
    needs: [lint, security-checks, performance-test, integration-test, build]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Generate Summary
        run: |
          echo "### CI Pipeline Results" > summary.md
          echo "| Job | Status | Details |" >> summary.md
          echo "|-----|--------|----------|" >> summary.md
          echo "| Lint | ${{ needs.lint.result == 'success' && '✅' || '❌' }} | Code quality checks |" >> summary.md
          echo "| Security Checks | ${{ needs.security-checks.result == 'success' && '✅' || '❌' }} | Vulnerability scanning |" >> summary.md
          echo "| Performance Tests | ${{ needs.performance-test.result == 'success' && '✅' || '❌' }} | Benchmark results |" >> summary.md
          echo "| Integration Tests | ${{ needs.integration-test.result == 'success' && '✅' || '❌' }} | System tests |" >> summary.md
          echo "| Build | ${{ needs.build.result == 'success' && '✅' || needs.build.result == 'skipped' && '⏭️' || '❌' }} | Production build |" >> summary.md

      - name: Notify Slack
        if: always()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
          WORKFLOW_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          status="${{ needs.lint.result == 'success' && needs.security-checks.result == 'success' && needs.performance-test.result == 'success' && needs.integration-test.result == 'success' && (needs.build.result == 'success' || needs.build.result == 'skipped') && '✅ Success' || '❌ Failure' }}"
          curl -X POST -H "Content-type: application/json" \
               -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
               -d "{
                 \"channel\":\"$SLACK_CHANNEL_ID\",
                 \"text\":\"*CI Results:* $status\n*Workflow:* <$WORKFLOW_URL|View Details>\",
                 \"blocks\": [
                   {
                     \"type\": \"section\",
                     \"text\": {
                       \"type\": \"mrkdwn\",
                       \"text\": \"*CI Results:* $status\n*Branch:* \`${{ github.ref_name }}\`\n*Commit:* \`${{ github.sha }}\`\n*Performance:* View benchmark results in artifacts\n*Workflow:* <$WORKFLOW_URL|View Details>\"
                     }
                   }
                 ]
               }" \
               https://slack.com/api/chat.postMessage
