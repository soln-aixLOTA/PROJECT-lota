name: CI

on:
  push:
    branches: [ main ]
    paths:
      - 'ai-services/**'
      - '.github/workflows/**'
      - 'k8s/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'ai-services/**'
      - '.github/workflows/**'
      - 'k8s/**'

env:
  REGISTRY: ghcr.io
  PYTHON_VERSION: "3.10"
  RUST_VERSION: "1.74"

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [preprocessing, training, inference, attestation]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        if: matrix.service != 'attestation'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Rust
        if: matrix.service == 'attestation'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: clippy
          override: true

      - name: Cache Python dependencies
        if: matrix.service != 'attestation'
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('ai-services/*/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache Rust dependencies
        if: matrix.service == 'attestation'
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ai-services/attestation/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('ai-services/attestation/Cargo.lock') }}

      - name: Install Python dependencies
        if: matrix.service != 'attestation'
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio pytest-cov black isort mypy
          pip install -r ai-services/${{ matrix.service }}/requirements.txt

      - name: Run Python linting
        if: matrix.service != 'attestation'
        run: |
          black --check ai-services/${{ matrix.service }}
          isort --check ai-services/${{ matrix.service }}
          mypy ai-services/${{ matrix.service }}

      - name: Run Python tests
        if: matrix.service != 'attestation'
        run: |
          pytest ai-services/${{ matrix.service }}/tests --cov=ai-services/${{ matrix.service }}/src --cov-report=xml

      - name: Run Rust linting
        if: matrix.service == 'attestation'
        run: |
          cd ai-services/attestation
          cargo fmt -- --check
          cargo clippy -- -D warnings

      - name: Run Rust tests
        if: matrix.service == 'attestation'
        run: |
          cd ai-services/attestation
          cargo test

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: ${{ matrix.service }}

  build:
    name: Build and Push Images
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [preprocessing, training, inference, attestation]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}-${{ matrix.service }}
          tags: |
            type=sha,prefix=${{ matrix.service }}-
            type=ref,event=branch
            type=ref,event=tag

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ai-services/${{ matrix.service }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif' 