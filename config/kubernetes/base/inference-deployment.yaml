apiVersion: apps/v1
kind: Deployment
metadata:
  name: inference-service
  namespace: lotabots
  labels:
    app: inference-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: inference-service
  template:
    metadata:
      labels:
        app: inference-service
      annotations:
        nvidia.com/gpu-accelerated: "true"
        nvidia.com/mps-capable: "true"
        triton.nvidia.com/model-repository: "/models"
    spec:
      runtimeClassName: nvidia
      initContainers:
      - name: model-initializer
        image: nvcr.io/nvidia/tensorrt:23.10-py3
        command: ["/bin/sh", "-c"]
        args:
        - |
          # Convert models to TensorRT if needed
          for model in /models/*; do
            if [ -d "$model" ]; then
              if [ -f "$model/1/model.onnx" ]; then
                trtexec --onnx="$model/1/model.onnx" \
                        --saveEngine="$model/1/model.plan" \
                        --fp16 \
                        --workspace=1024 \
                        --minShapes=input:1x3x224x224 \
                        --optShapes=input:8x3x224x224 \
                        --maxShapes=input:32x3x224x224 \
                        --verbose
              fi
            fi
          done
        volumeMounts:
        - name: models
          mountPath: /models
      containers:
      - name: inference-service
        image: nvcr.io/nvidia/tritonserver:23.10-py3
        imagePullPolicy: Always
        args:
        - tritonserver
        - --model-repository=/models
        - --model-control-mode=explicit
        - --load-model=*
        - --strict-model-config=false
        - --log-verbose=1
        - --allow-metrics=true
        - --allow-gpu-metrics=true
        - --metrics-interval-ms=1000
        ports:
        - containerPort: 8000
          name: http
        - containerPort: 8001
          name: grpc
        - containerPort: 8002
          name: metrics
        resources:
          requests:
            cpu: "4"
            memory: "16Gi"
            nvidia.com/gpu: "1"
            nvidia.com/gpu-memory: "16Gi"
          limits:
            cpu: "8"
            memory: "32Gi"
            nvidia.com/gpu: "1"
            nvidia.com/gpu-memory: "32Gi"
        envFrom:
        - configMapRef:
            name: nvidia-config
        - configMapRef:
            name: triton-config
        env:
        - name: CUDA_VISIBLE_DEVICES
          value: "0"
        - name: TF_FORCE_GPU_ALLOW_GROWTH
          value: "true"
        - name: TF_GPU_ALLOCATOR
          value: "cuda_malloc_async"
        - name: PYTORCH_CUDA_ALLOC_CONF
          value: "max_split_size_mb:512"
        volumeMounts:
        - name: models
          mountPath: /models
          readOnly: true
        - name: shm
          mountPath: /dev/shm
        - name: cache
          mountPath: /cache
        livenessProbe:
          httpGet:
            path: /v2/health/live
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /v2/health/ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 2
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /v2/health/live
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 30
      volumes:
      - name: models
        persistentVolumeClaim:
          claimName: models-pvc
      - name: shm
        emptyDir:
          medium: Memory
          sizeLimit: "4Gi"
      - name: cache
        emptyDir:
          medium: Memory
          sizeLimit: "2Gi"
      nodeSelector:
        nvidia.com/gpu: "present"
        nvidia.com/cuda-version: "12.0"
      tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: nvidia.com/gpu.product
                operator: In
                values:
                - Tesla-A100
                - Tesla-H100
                - Tesla-V100
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - inference-service
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: inference-service
  namespace: lotabots
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: http
    protocol: TCP
    name: http
  - port: 8001
    targetPort: grpc
    protocol: TCP
    name: grpc
  - port: 8002
    targetPort: metrics
    protocol: TCP
    name: metrics
  selector:
    app: inference-service
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: inference-service-hpa
  namespace: lotabots
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: inference-service
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Resource
    resource:
      name: nvidia.com/gpu
      target:
        type: AverageValue
        averageValue: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Pods
        value: 2
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Pods
        value: 1
        periodSeconds: 120
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: inference-service-pdb
  namespace: lotabots
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: inference-service 