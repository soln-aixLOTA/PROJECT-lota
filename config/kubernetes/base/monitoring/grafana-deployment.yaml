apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: lotabots
data:
  prometheus.yaml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      url: http://prometheus:9090
      access: proxy
      isDefault: true
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: lotabots
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
    - name: 'LotaBots'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: true
      editable: true
      options:
        path: /var/lib/grafana/dashboards
  api-gateway.json: |
    {
      "title": "API Gateway Overview",
      "panels": [
        {
          "title": "Request Rate",
          "type": "graph",
          "targets": [
            {
              "expr": "sum(rate(http_requests_total[5m])) by (status)",
              "legendFormat": "{{status}}"
            }
          ]
        },
        {
          "title": "Latency (p95)",
          "type": "graph",
          "targets": [
            {
              "expr": "api_gateway:request_latency:p95",
              "legendFormat": "p95"
            }
          ]
        },
        {
          "title": "Rate Limiting",
          "type": "graph",
          "targets": [
            {
              "expr": "api_gateway:rate_limit_ratio",
              "legendFormat": "rate limited %"
            }
          ]
        }
      ]
    }
  inference-service.json: |
    {
      "title": "Inference Service Overview",
      "panels": [
        {
          "title": "GPU Utilization",
          "type": "graph",
          "targets": [
            {
              "expr": "inference:gpu_utilization:avg",
              "legendFormat": "{{gpu}}"
            }
          ]
        },
        {
          "title": "Model Latency",
          "type": "graph",
          "targets": [
            {
              "expr": "inference:model_latency:p95",
              "legendFormat": "{{model}}"
            }
          ]
        },
        {
          "title": "Throughput",
          "type": "graph",
          "targets": [
            {
              "expr": "inference:throughput",
              "legendFormat": "{{model}}"
            }
          ]
        }
      ]
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: lotabots
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:10.1.0
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-secret
              key: admin-password
        - name: GF_AUTH_ANONYMOUS_ENABLED
          value: "true"
        - name: GF_AUTH_ANONYMOUS_ORG_ROLE
          value: "Viewer"
        resources:
          requests:
            cpu: "200m"
            memory: "256Mi"
          limits:
            cpu: "1"
            memory: "1Gi"
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: grafana-dashboards
          mountPath: /etc/grafana/provisioning/dashboards
        - name: dashboard-templates
          mountPath: /var/lib/grafana/dashboards
        livenessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 60
          timeoutSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 60
          timeoutSeconds: 30
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-storage
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards
          items:
          - key: dashboards.yaml
            path: dashboards.yaml
      - name: dashboard-templates
        configMap:
          name: grafana-dashboards
          items:
          - key: api-gateway.json
            path: api-gateway.json
          - key: inference-service.json
            path: inference-service.json
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-storage
  namespace: lotabots
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: lotabots
spec:
  ports:
  - port: 3000
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: grafana 