version: "3.8"

services:
  app:
    build:
      context: ../..
      dockerfile: services/document-automation/Dockerfile
    ports:
      - "${PORT:-8080}:8080"
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-dev_user}:${DB_PASSWORD:-dev_password}@db:5432/${DB_NAME:-document_automation_dev}
      - JWT_SECRET=${JWT_SECRET:-development_secret_key}
      - RUST_LOG=info
    depends_on:
      - db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - document-automation

  db:
    image: postgres:13-alpine
    environment:
      - POSTGRES_USER=${DB_USER:-dev_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-dev_password}
      - POSTGRES_DB=${DB_NAME:-document_automation_dev}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - document-automation

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./config/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    ports:
      - "9090:9090"
    networks:
      - document-automation

  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - document-automation

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  document-automation:
    driver: bridge
